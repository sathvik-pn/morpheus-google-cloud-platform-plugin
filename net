import com.google.api.client.googleapis.auth.oauth2.GoogleCredential
import com.google.api.client.http.javanet.NetHttpTransport
import com.google.api.client.json.jackson2.JacksonFactory
import com.google.api.gax.core.FixedCredentialsProvider
import com.google.auth.oauth2.ServiceAccountCredentials
import com.google.cloud.resourcemanager.v3.Project
import com.google.cloud.resourcemanager.v3.ProjectsClient
import com.google.cloud.resourcemanager.v3.ProjectsSettings
import java.security.KeyFactory
import java.security.PrivateKey
import java.security.spec.PKCS8EncodedKeySpec
import java.util.Base64
import org.slf4j.Logger
import org.slf4j.LoggerFactory

class ProjectLister {
    private static final Logger logger = LoggerFactory.getLogger(ProjectLister.class)

    static void main(String[] args) {
        // 1. Service Account Details
        def serviceAccountEmail = "your-service-account@project-id.iam.gserviceaccount.com" // Replace
        def privateKeyString = "PASTE_YOUR_PRIVATE_KEY_HERE" // Replace with the *string* of your private key
         privateKeyString = privateKeyString.replaceAll("-----BEGIN PRIVATE KEY-----", "")
                                            .replaceAll("-----END PRIVATE KEY-----", "")
                                            .replaceAll("\\s+", "") //remove any whitespace

        // 2. Decode the Private Key (assuming PKCS#8 format)
        try {
            byte[] privateKeyBytes = Base64.getDecoder().decode(privateKeyString)
            PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(privateKeyBytes)
            KeyFactory keyFactory = KeyFactory.getInstance("RSA") // Or "EC" if it's an elliptic curve key
            PrivateKey privateKey = keyFactory.generatePrivate(keySpec)

             // 3. Create GoogleCredential
             def credential = new GoogleCredential.Builder()
                .setTransport(new NetHttpTransport())
                .setJsonFactory(new JacksonFactory())
                .setServiceAccountId(serviceAccountEmail)
                .setServiceAccountPrivateKey(privateKey)
                .setServiceAccountScopes(Collections.singleton("https://www.googleapis.com/auth/cloud-platform"))
                .build()

            // 4. Adapt GoogleCredential to ServiceAccountCredentials
            def serviceAccountCredentials = new ServiceAccountCredentials(credential)


            // 5. Create ProjectsClient
            ProjectsSettings projectsSettings = ProjectsSettings.newBuilder()
                .setCredentialsProvider(FixedCredentialsProvider.create(serviceAccountCredentials))
                .build()

            ProjectsClient projectsClient = ProjectsClient.create(projectsSettings)

            // 6. List Projects
            String parent = "organizations/476859037668" // Replace with your Organization ID or "" for all projects.  sathvik-palakshappa-nulageri
            for (Project project : projectsClient.listProjects(parent).iterateAll()) {
                logger.info("Project Name: ${project.getDisplayName()}")
                logger.info("Project ID: ${project.getProjectId()}")
                logger.info("Project Number: ${project.getName()}")
                logger.info("State: ${project.getState()}")
                logger.info("---")
            }

            // 7. Close Client
            projectsClient.close()

        } catch (Exception e) {
            logger.error("Error: " + e.getMessage(), e)
        }
    }
}
